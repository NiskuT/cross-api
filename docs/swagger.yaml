basePath: /
definitions:
  commons.Metadata:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      deleted_at:
        type: integer
      deleted_by:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  commons.Pagination:
    properties:
      page_number:
        type: integer
      page_size:
        type: integer
      total_item:
        type: integer
      total_pages:
        type: integer
    type: object
  commons.Response:
    properties:
      message:
        type: string
    type: object
  customerservice.Customer:
    properties:
      address:
        type: string
      country:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/commons.Metadata'
      name:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      postal_code:
        type: string
      social_name:
        type: string
      user_id:
        type: string
    type: object
  customerservice.ListCustomersResponse:
    properties:
      customers:
        items:
          $ref: '#/definitions/customerservice.Customer'
        type: array
      pagination:
        $ref: '#/definitions/commons.Pagination'
    type: object
  models.CreateCustomerRequest:
    properties:
      address:
        type: string
      country:
        type: string
      description:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      postal_code:
        type: string
      social_name:
        type: string
    type: object
  models.CreateInvoiceRequest:
    properties:
      customer_id:
        type: string
      due_date:
        type: integer
      invoice_date:
        type: integer
      invoice_number:
        type: string
      items:
        items:
          $ref: '#/definitions/valueobject.InvoiceItem'
        type: array
      notes:
        type: string
      quote_id:
        type: string
    type: object
  models.CreateQuoteRequest:
    properties:
      customer_id:
        type: string
      discount:
        type: number
      items:
        items:
          $ref: '#/definitions/valueobject.QuoteItem'
        type: array
      notes:
        type: string
      quote_date:
        type: integer
      valid_until:
        type: integer
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.Customer:
    properties:
      address:
        type: string
      country:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/valueobject.Metadata'
      name:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      postal_code:
        type: string
      social_name:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Invoice:
    properties:
      customer:
        $ref: '#/definitions/models.Customer'
      due_date:
        type: integer
      invoice_date:
        type: integer
      invoice_id:
        type: string
      invoice_number:
        type: string
      items:
        items:
          $ref: '#/definitions/valueobject.InvoiceItem'
        type: array
      metadata:
        $ref: '#/definitions/valueobject.Metadata'
      notes:
        type: string
      payment_date:
        type: integer
      payment_method:
        type: string
      payment_status:
        $ref: '#/definitions/valueobject.PaymentStatus'
      quote_id:
        type: string
    type: object
  models.Invoices:
    properties:
      invoices:
        items:
          $ref: '#/definitions/models.Invoice'
        type: array
      pagination:
        $ref: '#/definitions/commons.Pagination'
    type: object
  models.LoginUser:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Quote:
    properties:
      customer:
        $ref: '#/definitions/models.Customer'
      discount:
        type: number
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/valueobject.QuoteItem'
        type: array
      metadata:
        $ref: '#/definitions/valueobject.Metadata'
      notes:
        type: string
      quote_date:
        type: integer
      status:
        $ref: '#/definitions/valueobject.QuoteStatus'
      valid_until:
        type: integer
    type: object
  models.Quotes:
    properties:
      pagination:
        $ref: '#/definitions/commons.Pagination'
      quotes:
        items:
          $ref: '#/definitions/models.Quote'
        type: array
    type: object
  models.UpdateCustomerRequest:
    properties:
      address:
        type: string
      country:
        type: string
      description:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      postal_code:
        type: string
      social_name:
        type: string
    type: object
  models.UpdateInvoiceRequest:
    properties:
      customer_id:
        type: string
      due_date:
        type: integer
      invoice_date:
        type: integer
      invoice_number:
        type: string
      items:
        items:
          $ref: '#/definitions/valueobject.InvoiceItem'
        type: array
      notes:
        type: string
      payment_status:
        $ref: '#/definitions/valueobject.PaymentStatus'
      quote_id:
        type: string
    type: object
  models.UpdateQuoteRequest:
    properties:
      customer_id:
        type: string
      discount:
        type: number
      items:
        items:
          $ref: '#/definitions/valueobject.QuoteItem'
        type: array
      notes:
        type: string
      quote_date:
        type: integer
      status:
        $ref: '#/definitions/valueobject.QuoteStatus'
      valid_until:
        type: integer
    type: object
  models.UpdateUser:
    properties:
      avatar_url:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  userservice.JwtToken:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  userservice.OAuthInitiateResponse:
    properties:
      auth_url:
        type: string
    type: object
  userservice.User:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      metadata:
        $ref: '#/definitions/commons.Metadata'
      password:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  userservice.UsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/commons.Pagination'
      users:
        items:
          $ref: '#/definitions/userservice.User'
        type: array
    type: object
  valueobject.InvoiceItem:
    properties:
      description:
        type: string
      quantity:
        type: integer
      tax_rate:
        type: number
      unit_price:
        type: number
    type: object
  valueobject.Metadata:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      deleted_at:
        type: integer
      deleted_by:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  valueobject.PaymentStatus:
    enum:
    - PAYMENT_STATUS_UNSPECIFIED
    - UNPAID
    - PAID
    - OVERDUE
    type: string
    x-enum-varnames:
    - PaymentStatusUnspecified
    - PaymentStatusUnpaid
    - PaymentStatusPaid
    - PaymentStatusOverdue
  valueobject.QuoteItem:
    properties:
      description:
        type: string
      quantity:
        type: integer
      tax_rate:
        type: number
      unit_price:
        type: number
    type: object
  valueobject.QuoteStatus:
    enum:
    - QUOTE_STATUS_UNSPECIFIED
    - PENDING
    - APPROVED
    - REJECTED
    type: string
    x-enum-varnames:
    - QuoteStatusUnspecified
    - QuoteStatusPending
    - QuoteStatusApproved
    - QuoteStatusRejected
host: localhost:9000
info:
  contact:
    email: orkys.com@gmail.com
    name: API Support
    url: http://www.example.com/support
  description: This is the API documentation for the Orkys API Gateway
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://example.com/terms/
  title: Orkys API
  version: "1.0"
paths:
  /customers:
    get:
      consumes:
      - application/json
      description: Returns a list of customers with pagination.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of customers per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The customer list and pagination details
          schema:
            $ref: '#/definitions/customerservice.ListCustomersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns a list of customers.
      tags:
      - customer
    post:
      consumes:
      - application/json
      description: Creates a new customer with the provided details.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The customer object
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: The created customer object
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Creates a new customer.
      tags:
      - customer
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a customer by ID.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/commons.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Deletes a customer.
      tags:
      - customer
    get:
      consumes:
      - application/json
      description: Returns a customer by ID with all the details.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The customer object
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns a customer by ID.
      tags:
      - customer
    patch:
      consumes:
      - application/json
      description: Updates a customer with the provided details.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The customer object
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: The updated customer object
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Updates a customer.
      tags:
      - customer
  /invoice:
    get:
      consumes:
      - application/json
      description: Returns a list of invoices with pagination.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of invoices per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The invoice list and pagination details
          schema:
            $ref: '#/definitions/models.Invoices'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns a list of invoices.
      tags:
      - invoice
    post:
      consumes:
      - application/json
      description: Creates a new invoice with the provided details.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The invoice object
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/models.CreateInvoiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: The created invoice object
          schema:
            $ref: '#/definitions/models.Invoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Creates a new invoice.
      tags:
      - invoice
  /invoice/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an invoice by ID.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Deletes an invoice.
      tags:
      - invoice
    get:
      consumes:
      - application/json
      description: Returns an invoice by ID with all the details.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The invoice object
          schema:
            $ref: '#/definitions/models.Invoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns an invoice by ID.
      tags:
      - invoice
    patch:
      consumes:
      - application/json
      description: Updates an invoice with the provided details.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The invoice object
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: The updated invoice object
          schema:
            $ref: '#/definitions/models.Invoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Updates an invoice.
      tags:
      - invoice
  /list:
    get:
      consumes:
      - application/json
      description: Returns a list of users, limited by a query param (default 10).
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of events per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/userservice.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List users
      tags:
      - user
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password and returns a JWT
        token.
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: Returns user information and tokens in cookies
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (invalid credentials)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /oauth/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Processes the OAuth callback from the provider, calls the user
        service, and returns a login response with JWT tokens.
      parameters:
      - description: OAuth provider (custom or google)
        in: path
        name: provider
        required: true
        type: string
      - description: State parameter for CSRF validation
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code (and any other provider parameters)
        in: query
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User login response with tokens in cookies
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Process the OAuth callback from a provider
      tags:
      - auth
  /oauth/{provider}/initiate:
    get:
      consumes:
      - application/json
      description: Initiates an OAuth flow (for providers "custom" or "google") by
        calling the user service and returning the provider’s auth URL.
      parameters:
      - description: OAuth provider (custom or google)
        in: path
        name: provider
        required: true
        type: string
      - description: Optional state parameter. If omitted, a new state will be generated.
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OAuth initiation response
          schema:
            $ref: '#/definitions/userservice.OAuthInitiateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Initiate an OAuth flow for a provider
      tags:
      - auth
  /quote:
    get:
      consumes:
      - application/json
      description: Returns a list of quotes with pagination.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of events per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The quote object list, and pagination details
          schema:
            $ref: '#/definitions/models.Quotes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns a list of quotes.
      tags:
      - quote
    post:
      consumes:
      - application/json
      description: Creates a new quote with the provided details.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The quote object
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/models.CreateQuoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: The created quote object
          schema:
            $ref: '#/definitions/models.Quote'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Creates a new quote.
      tags:
      - quote
  /quote/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a quote by ID.
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Deletes a quote.
      tags:
      - quote
    get:
      consumes:
      - application/json
      description: Returns a quote by ID with all the details.
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The quote object
          schema:
            $ref: '#/definitions/models.Quote'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns a quote by ID.
      tags:
      - quote
    patch:
      consumes:
      - application/json
      description: Updates a quote with the provided details.
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: The quote object
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/models.UpdateQuoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: The updated quote object
          schema:
            $ref: '#/definitions/models.Quote'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Updates a quote.
      tags:
      - quote
  /refresh:
    get:
      consumes:
      - application/json
      description: Takes a refresh token and returns a new access token (and possibly
        a new refresh token).
      parameters:
      - description: Bearer <refresh_token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New access/refresh token pair in http-only cookies
          schema:
            $ref: '#/definitions/userservice.JwtToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh a JWT token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user in the system and returns the user object with
        tokens.
      parameters:
      - description: Registration details
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created user with tokens in cookies
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict (user already exists)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /user:
    patch:
      consumes:
      - application/json
      description: Updates the user details (first name, last name, password and avatar
        URL) if they are not empty.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User details to update
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Created user with tokens
          schema:
            $ref: '#/definitions/commons.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user details
      tags:
      - user
swagger: "2.0"
